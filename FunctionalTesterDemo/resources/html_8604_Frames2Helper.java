// DO NOT EDIT: This file is automatically generated.
//
// Only the associated template file should be edited directly.
// Helper class files are automatically regenerated from the template
// files at various times, including record actions and test object
// insertion actions.  Any changes made directly to a helper class
// file will be lost when automatically updated.

package resources;

import com.rational.test.ft.object.interfaces.*;
import com.rational.test.ft.object.interfaces.SAP.*;
import com.rational.test.ft.object.interfaces.WPF.*;
import com.rational.test.ft.object.interfaces.siebel.*;
import com.rational.test.ft.object.interfaces.flex.*;
import com.rational.test.ft.object.interfaces.dojo.*;
import com.rational.test.ft.object.interfaces.generichtmlsubdomain.*;
import com.rational.test.ft.script.*;
import com.rational.test.ft.vp.IFtVerificationPoint;
import com.ibm.rational.test.ft.object.interfaces.sapwebportal.*;
/**
 * Script Name   : <b>html_8604_Frames2</b><br>
 * Generated     : <b>2019/02/12 12:59:16 PM</b><br>
 * Description   : Helper class for script<br>
 * Original Host : Windows 8.1 x86 6.3 <br>
 * 
 * @since  February 12, 2019
 * @author JaspreetSinghC
 */
public abstract class html_8604_Frames2Helper extends RationalTestScript
{
	/**
	 * htmlBrowser: with default state.
	 *		.class : Html.HtmlBrowser
	 * 		.browserName : Firefox
	 * 		.processName : firefox.exe
	 */
	protected BrowserTestObject browser_htmlBrowser() 
	{
		return new BrowserTestObject(
                        getMappedTestObject("browser_htmlBrowser"));
	}
	/**
	 * htmlBrowser: with specific test context and state.
	 *		.class : Html.HtmlBrowser
	 * 		.browserName : Firefox
	 * 		.processName : firefox.exe
	 */
	protected BrowserTestObject browser_htmlBrowser(TestObject anchor, long flags) 
	{
		return new BrowserTestObject(
                        getMappedTestObject("browser_htmlBrowser"), anchor, flags);
	}
	
	/**
	 * actionsubmit: with default state.
	 *		.id : 
	 * 		.type : submit
	 * 		.value : action
	 * 		.title : 
	 * 		.class : Html.INPUT.submit
	 * 		.name : Delete
	 * 		.classIndex : 2
	 */
	protected GuiTestObject button_actionsubmit() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_actionsubmit"));
	}
	/**
	 * actionsubmit: with specific test context and state.
	 *		.id : 
	 * 		.type : submit
	 * 		.value : action
	 * 		.title : 
	 * 		.class : Html.INPUT.submit
	 * 		.name : Delete
	 * 		.classIndex : 2
	 */
	protected GuiTestObject button_actionsubmit(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_actionsubmit"), anchor, flags);
	}
	
	/**
	 * actionsubmit: with default state.
	 *		.id : 
	 * 		.type : submit
	 * 		.value : action
	 * 		.title : 
	 * 		.class : Html.INPUT.submit
	 * 		.name : Cancel
	 * 		.classIndex : 4
	 */
	protected GuiTestObject button_actionsubmit2() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_actionsubmit2"));
	}
	/**
	 * actionsubmit: with specific test context and state.
	 *		.id : 
	 * 		.type : submit
	 * 		.value : action
	 * 		.title : 
	 * 		.class : Html.INPUT.submit
	 * 		.name : Cancel
	 * 		.classIndex : 4
	 */
	protected GuiTestObject button_actionsubmit2(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_actionsubmit2"), anchor, flags);
	}
	
	/**
	 * actionsubmit: with default state.
	 *		.id : 
	 * 		.type : submit
	 * 		.value : action
	 * 		.title : 
	 * 		.class : Html.INPUT.submit
	 * 		.name : Add
	 * 		.classIndex : 1
	 */
	protected GuiTestObject button_actionsubmit3() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_actionsubmit3"));
	}
	/**
	 * actionsubmit: with specific test context and state.
	 *		.id : 
	 * 		.type : submit
	 * 		.value : action
	 * 		.title : 
	 * 		.class : Html.INPUT.submit
	 * 		.name : Add
	 * 		.classIndex : 1
	 */
	protected GuiTestObject button_actionsubmit3(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_actionsubmit3"), anchor, flags);
	}
	
	/**
	 * actionsubmit: with default state.
	 *		.id : 
	 * 		.type : submit
	 * 		.value : action
	 * 		.title : 
	 * 		.class : Html.INPUT.submit
	 * 		.name : Change
	 * 		.classIndex : 3
	 */
	protected GuiTestObject button_actionsubmit4() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_actionsubmit4"));
	}
	/**
	 * actionsubmit: with specific test context and state.
	 *		.id : 
	 * 		.type : submit
	 * 		.value : action
	 * 		.title : 
	 * 		.class : Html.INPUT.submit
	 * 		.name : Change
	 * 		.classIndex : 3
	 */
	protected GuiTestObject button_actionsubmit4(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_actionsubmit4"), anchor, flags);
	}
	
	/**
	 * Bridge1Jpg49392Bytes: with default state.
	 *		.id : 
	 * 		.type : image
	 * 		.value : 
	 * 		.title : 
	 * 		.class : Html.INPUT.image
	 * 		.name : ImageButton
	 * 		.classIndex : 0
	 */
	protected GuiTestObject button_bridge1Jpg49392Bytes() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_bridge1Jpg49392Bytes"));
	}
	/**
	 * Bridge1Jpg49392Bytes: with specific test context and state.
	 *		.id : 
	 * 		.type : image
	 * 		.value : 
	 * 		.title : 
	 * 		.class : Html.INPUT.image
	 * 		.name : ImageButton
	 * 		.classIndex : 0
	 */
	protected GuiTestObject button_bridge1Jpg49392Bytes(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_bridge1Jpg49392Bytes"), anchor, flags);
	}
	
	/**
	 * Button: with default state.
	 *		.id : 
	 * 		.type : button
	 * 		.value : Button
	 * 		.title : 
	 * 		.class : Html.INPUT.button
	 * 		.name : B1
	 * 		.classIndex : 0
	 */
	protected GuiTestObject button_button() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_button"));
	}
	/**
	 * Button: with specific test context and state.
	 *		.id : 
	 * 		.type : button
	 * 		.value : Button
	 * 		.title : 
	 * 		.class : Html.INPUT.button
	 * 		.name : B1
	 * 		.classIndex : 0
	 */
	protected GuiTestObject button_button(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_button"), anchor, flags);
	}
	
	/**
	 * Reset: with default state.
	 *		.id : 
	 * 		.type : reset
	 * 		.value : Reset
	 * 		.title : 
	 * 		.class : Html.INPUT.reset
	 * 		.name : Reset
	 * 		.classIndex : 0
	 */
	protected GuiTestObject button_reset() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_reset"));
	}
	/**
	 * Reset: with specific test context and state.
	 *		.id : 
	 * 		.type : reset
	 * 		.value : Reset
	 * 		.title : 
	 * 		.class : Html.INPUT.reset
	 * 		.name : Reset
	 * 		.classIndex : 0
	 */
	protected GuiTestObject button_reset(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_reset"), anchor, flags);
	}
	
	/**
	 * Submit: with default state.
	 *		.id : 
	 * 		.type : submit
	 * 		.value : Submit
	 * 		.title : 
	 * 		.class : Html.INPUT.submit
	 * 		.name : Submit
	 * 		.classIndex : 0
	 */
	protected GuiTestObject button_submit() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_submit"));
	}
	/**
	 * Submit: with specific test context and state.
	 *		.id : 
	 * 		.type : submit
	 * 		.value : Submit
	 * 		.title : 
	 * 		.class : Html.INPUT.submit
	 * 		.name : Submit
	 * 		.classIndex : 0
	 */
	protected GuiTestObject button_submit(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_submit"), anchor, flags);
	}
	
	/**
	 * Submit: with default state.
	 *		.id : 
	 * 		.type : submit
	 * 		.value : Submit
	 * 		.title : 
	 * 		.class : Html.INPUT.submit
	 * 		.name : submit_button
	 * 		.classIndex : 0
	 */
	protected GuiTestObject button_submit2() 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_submit2"));
	}
	/**
	 * Submit: with specific test context and state.
	 *		.id : 
	 * 		.type : submit
	 * 		.value : Submit
	 * 		.title : 
	 * 		.class : Html.INPUT.submit
	 * 		.name : submit_button
	 * 		.classIndex : 0
	 */
	protected GuiTestObject button_submit2(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("button_submit2"), anchor, flags);
	}
	
	/**
	 * CheckboxON: with default state.
	 *		.id : 
	 * 		.type : checkbox
	 * 		.value : ON
	 * 		.title : 
	 * 		.class : Html.INPUT.checkbox
	 * 		.name : Checkbox
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject checkBox_checkboxON() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_checkboxON"));
	}
	/**
	 * CheckboxON: with specific test context and state.
	 *		.id : 
	 * 		.type : checkbox
	 * 		.value : ON
	 * 		.title : 
	 * 		.class : Html.INPUT.checkbox
	 * 		.name : Checkbox
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject checkBox_checkboxON(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("checkBox_checkboxON"), anchor, flags);
	}
	
	/**
	 * Close: with default state.
	 *		.class : javax.swing.JButton
	 * 		.priorLabel :     
	 * 		accessibleContext.accessibleName : Close
	 * 		.classIndex : 2
	 */
	protected GuiTestObject close() 
	{
		return new GuiTestObject(
                        getMappedTestObject("close"));
	}
	/**
	 * Close: with specific test context and state.
	 *		.class : javax.swing.JButton
	 * 		.priorLabel :     
	 * 		accessibleContext.accessibleName : Close
	 * 		.classIndex : 2
	 */
	protected GuiTestObject close(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("close"), anchor, flags);
	}
	
	/**
	 * FrameExamplePage: with default state.
	 *		.title : Frame Example Page
	 * 		.class : Html.HtmlDocument
	 * 		.url : http://civcez229.nonprod.hclpnp.com/aries-web/samples/frametest/index.html
	 */
	protected DocumentTestObject document_frameExamplePage() 
	{
		return new DocumentTestObject(
                        getMappedTestObject("document_frameExamplePage"));
	}
	/**
	 * FrameExamplePage: with specific test context and state.
	 *		.title : Frame Example Page
	 * 		.class : Html.HtmlDocument
	 * 		.url : http://civcez229.nonprod.hclpnp.com/aries-web/samples/frametest/index.html
	 */
	protected DocumentTestObject document_frameExamplePage(TestObject anchor, long flags) 
	{
		return new DocumentTestObject(
                        getMappedTestObject("document_frameExamplePage"), anchor, flags);
	}
	
	/**
	 * HomePage: with default state.
	 *		.title : Home Page
	 * 		.class : Html.HtmlDocument
	 * 		.url : http://civcez229.nonprod.hclpnp.com/aries-web/samples/htmlsamplerpag/index.htm
	 */
	protected DocumentTestObject document_homePage() 
	{
		return new DocumentTestObject(
                        getMappedTestObject("document_homePage"));
	}
	/**
	 * HomePage: with specific test context and state.
	 *		.title : Home Page
	 * 		.class : Html.HtmlDocument
	 * 		.url : http://civcez229.nonprod.hclpnp.com/aries-web/samples/htmlsamplerpag/index.htm
	 */
	protected DocumentTestObject document_homePage(TestObject anchor, long flags) 
	{
		return new DocumentTestObject(
                        getMappedTestObject("document_homePage"), anchor, flags);
	}
	
	/**
	 * httpCivcez229NonprodHclpnpComAriesWebSamplesHtmlsample: with default state.
	 *		.title : 
	 * 		.class : Html.HtmlDocument
	 * 		.url : http://civcez229.nonprod.hclpnp.com/aries-web/samples/htmlsamplerpag/Formpost.as ...
	 */
	protected DocumentTestObject document_httpCivcez229NonprodH() 
	{
		return new DocumentTestObject(
                        getMappedTestObject("document_httpCivcez229NonprodH"));
	}
	/**
	 * httpCivcez229NonprodHclpnpComAriesWebSamplesHtmlsample: with specific test context and state.
	 *		.title : 
	 * 		.class : Html.HtmlDocument
	 * 		.url : http://civcez229.nonprod.hclpnp.com/aries-web/samples/htmlsamplerpag/Formpost.as ...
	 */
	protected DocumentTestObject document_httpCivcez229NonprodH(TestObject anchor, long flags) 
	{
		return new DocumentTestObject(
                        getMappedTestObject("document_httpCivcez229NonprodH"), anchor, flags);
	}
	
	/**
	 * HTMLFormSampler: with default state.
	 *		.id : 
	 * 		.title : 
	 * 		.class : Html.FORM
	 * 		.name : HTML Form sampler
	 * 		.classIndex : 0
	 */
	protected GuiTestObject form_htmlFormSampler() 
	{
		return new GuiTestObject(
                        getMappedTestObject("form_htmlFormSampler"));
	}
	/**
	 * HTMLFormSampler: with specific test context and state.
	 *		.id : 
	 * 		.title : 
	 * 		.class : Html.FORM
	 * 		.name : HTML Form sampler
	 * 		.classIndex : 0
	 */
	protected GuiTestObject form_htmlFormSampler(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("form_htmlFormSampler"), anchor, flags);
	}
	
	/**
	 * HTMLFormTagFile: with default state.
	 *		.id : 
	 * 		.title : 
	 * 		.class : Html.FORM
	 * 		.name : HTML Form Tag File
	 * 		.classIndex : 1
	 */
	protected GuiTestObject form_htmlFormTagFile() 
	{
		return new GuiTestObject(
                        getMappedTestObject("form_htmlFormTagFile"));
	}
	/**
	 * HTMLFormTagFile: with specific test context and state.
	 *		.id : 
	 * 		.title : 
	 * 		.class : Html.FORM
	 * 		.name : HTML Form Tag File
	 * 		.classIndex : 1
	 */
	protected GuiTestObject form_htmlFormTagFile(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("form_htmlFormTagFile"), anchor, flags);
	}
	
	/**
	 * HtmlFRAME: with default state.
	 *		.id : 
	 * 		.title : 
	 * 		.class : Html.FRAME
	 * 		.name : 
	 * 		.classIndex : 1
	 */
	protected StatelessGuiSubitemTestObject frame_htmlFRAME() 
	{
		return new StatelessGuiSubitemTestObject(
                        getMappedTestObject("frame_htmlFRAME"));
	}
	/**
	 * HtmlFRAME: with specific test context and state.
	 *		.id : 
	 * 		.title : 
	 * 		.class : Html.FRAME
	 * 		.name : 
	 * 		.classIndex : 1
	 */
	protected StatelessGuiSubitemTestObject frame_htmlFRAME(TestObject anchor, long flags) 
	{
		return new StatelessGuiSubitemTestObject(
                        getMappedTestObject("frame_htmlFRAME"), anchor, flags);
	}
	
	/**
	 * HTMLFormElementSamplePage: with default state.
	 *		.text : HTML Form Element sample page
	 * 		.id : 
	 * 		.href : http://civcez229.nonprod.hclpnp.com/aries-web/samples/htmlsamplerpag/index.htm
	 * 		.title : 
	 * 		.class : Html.A
	 * 		.name : 
	 * 		.classIndex : 0
	 */
	protected GuiTestObject link_htmlFormElementSamplePage() 
	{
		return new GuiTestObject(
                        getMappedTestObject("link_htmlFormElementSamplePage"));
	}
	/**
	 * HTMLFormElementSamplePage: with specific test context and state.
	 *		.text : HTML Form Element sample page
	 * 		.id : 
	 * 		.href : http://civcez229.nonprod.hclpnp.com/aries-web/samples/htmlsamplerpag/index.htm
	 * 		.title : 
	 * 		.class : Html.A
	 * 		.name : 
	 * 		.classIndex : 0
	 */
	protected GuiTestObject link_htmlFormElementSamplePage(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("link_htmlFormElementSamplePage"), anchor, flags);
	}
	
	/**
	 * Investment: with default state.
	 *		.text : Under $25,000 $25,001 to $50,000 $50,001 and higher
	 * 		.id : 
	 * 		.title : 
	 * 		.class : Html.SELECT
	 * 		.name : Investment
	 * 		.classIndex : 0
	 */
	protected SelectGuiSubitemTestObject list_investment() 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_investment"));
	}
	/**
	 * Investment: with specific test context and state.
	 *		.text : Under $25,000 $25,001 to $50,000 $50,001 and higher
	 * 		.id : 
	 * 		.title : 
	 * 		.class : Html.SELECT
	 * 		.name : Investment
	 * 		.classIndex : 0
	 */
	protected SelectGuiSubitemTestObject list_investment(TestObject anchor, long flags) 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_investment"), anchor, flags);
	}
	
	/**
	 * Investment2: with default state.
	 *		.text : Under $25,000 $25,001 to $50,000 $50,001 and higher
	 * 		.id : 
	 * 		.title : 
	 * 		.class : Html.SELECT
	 * 		.name : Investment2
	 * 		.classIndex : 1
	 */
	protected SelectGuiSubitemTestObject list_investment2() 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_investment2"));
	}
	/**
	 * Investment2: with specific test context and state.
	 *		.text : Under $25,000 $25,001 to $50,000 $50,001 and higher
	 * 		.id : 
	 * 		.title : 
	 * 		.class : Html.SELECT
	 * 		.name : Investment2
	 * 		.classIndex : 1
	 */
	protected SelectGuiSubitemTestObject list_investment2(TestObject anchor, long flags) 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_investment2"), anchor, flags);
	}
	
	/**
	 * Investment3: with default state.
	 *		.text : Under $25,000 $25,001 to $50,000 $50,001 and higher
	 * 		.id : 
	 * 		.title : 
	 * 		.class : Html.SELECT
	 * 		.name : Investment3
	 * 		.classIndex : 2
	 */
	protected SelectGuiSubitemTestObject list_investment3() 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_investment3"));
	}
	/**
	 * Investment3: with specific test context and state.
	 *		.text : Under $25,000 $25,001 to $50,000 $50,001 and higher
	 * 		.id : 
	 * 		.title : 
	 * 		.class : Html.SELECT
	 * 		.name : Investment3
	 * 		.classIndex : 2
	 */
	protected SelectGuiSubitemTestObject list_investment3(TestObject anchor, long flags) 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_investment3"), anchor, flags);
	}
	
	/**
	 * FrameExamplePage: with default state.
	 *		.class : Html.HtmlBrowser.Tab
	 * 		.name : Frame Example Page
	 */
	protected BrowserTabTestObject pageTab_frameExamplePage() 
	{
		return new BrowserTabTestObject(
                        getMappedTestObject("pageTab_frameExamplePage"));
	}
	/**
	 * FrameExamplePage: with specific test context and state.
	 *		.class : Html.HtmlBrowser.Tab
	 * 		.name : Frame Example Page
	 */
	protected BrowserTabTestObject pageTab_frameExamplePage(TestObject anchor, long flags) 
	{
		return new BrowserTabTestObject(
                        getMappedTestObject("pageTab_frameExamplePage"), anchor, flags);
	}
	
	/**
	 * PluginEmbeddedFrame: with default state.
	 *		.class : sun.plugin2.main.client.PluginEmbeddedFrame
	 */
	protected GuiTestObject pluginEmbeddedFrame() 
	{
		return new GuiTestObject(
                        getMappedTestObject("pluginEmbeddedFrame"));
	}
	/**
	 * PluginEmbeddedFrame: with specific test context and state.
	 *		.class : sun.plugin2.main.client.PluginEmbeddedFrame
	 */
	protected GuiTestObject pluginEmbeddedFrame(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("pluginEmbeddedFrame"), anchor, flags);
	}
	
	/**
	 * SexF: with default state.
	 *		.id : 
	 * 		.type : radio
	 * 		.value : F
	 * 		.title : 
	 * 		.class : Html.INPUT.radio
	 * 		.name : Sex
	 * 		.classIndex : 1
	 */
	protected ToggleGUITestObject radioButton_sexF() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("radioButton_sexF"));
	}
	/**
	 * SexF: with specific test context and state.
	 *		.id : 
	 * 		.type : radio
	 * 		.value : F
	 * 		.title : 
	 * 		.class : Html.INPUT.radio
	 * 		.name : Sex
	 * 		.classIndex : 1
	 */
	protected ToggleGUITestObject radioButton_sexF(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("radioButton_sexF"), anchor, flags);
	}
	
	/**
	 * SexM: with default state.
	 *		.id : 
	 * 		.type : radio
	 * 		.value : M
	 * 		.title : 
	 * 		.class : Html.INPUT.radio
	 * 		.name : Sex
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject radioButton_sexM() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("radioButton_sexM"));
	}
	/**
	 * SexM: with specific test context and state.
	 *		.id : 
	 * 		.type : radio
	 * 		.value : M
	 * 		.title : 
	 * 		.class : Html.INPUT.radio
	 * 		.name : Sex
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject radioButton_sexM(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("radioButton_sexM"), anchor, flags);
	}
	
	/**
	 * _1linebox: with default state.
	 *		.id : 
	 * 		.type : text
	 * 		.title : 
	 * 		.class : Html.INPUT.text
	 * 		.name : 1linebox
	 * 		.classIndex : 0
	 */
	protected TextGuiTestObject text__1linebox() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text__1linebox"));
	}
	/**
	 * _1linebox: with specific test context and state.
	 *		.id : 
	 * 		.type : text
	 * 		.title : 
	 * 		.class : Html.INPUT.text
	 * 		.name : 1linebox
	 * 		.classIndex : 0
	 */
	protected TextGuiTestObject text__1linebox(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text__1linebox"), anchor, flags);
	}
	
	/**
	 * fav_file: with default state.
	 *		.id : 
	 * 		.type : text
	 * 		.title : 
	 * 		.class : Html.INPUT.text
	 * 		.name : fav_file
	 * 		.classIndex : 1
	 */
	protected TextGuiTestObject text_fav_file() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text_fav_file"));
	}
	/**
	 * fav_file: with specific test context and state.
	 *		.id : 
	 * 		.type : text
	 * 		.title : 
	 * 		.class : Html.INPUT.text
	 * 		.name : fav_file
	 * 		.classIndex : 1
	 */
	protected TextGuiTestObject text_fav_file(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text_fav_file"), anchor, flags);
	}
	
	/**
	 * Scrollbox: with default state.
	 *		.id : 
	 * 		.title : 
	 * 		.class : Html.TEXTAREA
	 * 		.name : Scrollbox
	 * 		.classIndex : 0
	 */
	protected TextGuiTestObject text_scrollbox() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text_scrollbox"));
	}
	/**
	 * Scrollbox: with specific test context and state.
	 *		.id : 
	 * 		.title : 
	 * 		.class : Html.TEXTAREA
	 * 		.name : Scrollbox
	 * 		.classIndex : 0
	 */
	protected TextGuiTestObject text_scrollbox(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text_scrollbox"), anchor, flags);
	}
	
	/**
	 * the_name: with default state.
	 *		.id : 
	 * 		.type : text
	 * 		.title : 
	 * 		.class : Html.INPUT.text
	 * 		.name : the_name
	 * 		.classIndex : 0
	 */
	protected TextGuiTestObject text_the_name() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text_the_name"));
	}
	/**
	 * the_name: with specific test context and state.
	 *		.id : 
	 * 		.type : text
	 * 		.title : 
	 * 		.class : Html.INPUT.text
	 * 		.name : the_name
	 * 		.classIndex : 0
	 */
	protected TextGuiTestObject text_the_name(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text_the_name"), anchor, flags);
	}
	
	/**
	 * Locate and return the verification point actionsubmit_standard object in the SUT.
	 */
	protected IFtVerificationPoint actionsubmit_standardVP() 
	{
		return vp("actionsubmit_standard");
	}
	protected IFtVerificationPoint actionsubmit_standardVP(TestObject anchor)
	{
		return vp("actionsubmit_standard", anchor);
	}
	
	/**
	 * Locate and return the verification point actionsubmit_standard_2 object in the SUT.
	 */
	protected IFtVerificationPoint actionsubmit_standard_2VP() 
	{
		return vp("actionsubmit_standard_2");
	}
	protected IFtVerificationPoint actionsubmit_standard_2VP(TestObject anchor)
	{
		return vp("actionsubmit_standard_2", anchor);
	}
	
	/**
	 * Locate and return the verification point actionsubmit_text object in the SUT.
	 */
	protected IFtVerificationPoint actionsubmit_textVP() 
	{
		return vp("actionsubmit_text");
	}
	protected IFtVerificationPoint actionsubmit_textVP(TestObject anchor)
	{
		return vp("actionsubmit_text", anchor);
	}
	
	/**
	 * Locate and return the verification point actionsubmit_text_2 object in the SUT.
	 */
	protected IFtVerificationPoint actionsubmit_text_2VP() 
	{
		return vp("actionsubmit_text_2");
	}
	protected IFtVerificationPoint actionsubmit_text_2VP(TestObject anchor)
	{
		return vp("actionsubmit_text_2", anchor);
	}
	
	/**
	 * Locate and return the verification point Bridge1Jpg49392Bytes_Bridge1Jpg49392Bytes object in the SUT.
	 */
	protected IFtVerificationPoint Bridge1Jpg49392Bytes_Bridge1Jpg49392BytesVP() 
	{
		return vp("Bridge1Jpg49392Bytes_Bridge1Jpg49392Bytes");
	}
	protected IFtVerificationPoint Bridge1Jpg49392Bytes_Bridge1Jpg49392BytesVP(TestObject anchor)
	{
		return vp("Bridge1Jpg49392Bytes_Bridge1Jpg49392Bytes", anchor);
	}
	
	/**
	 * Locate and return the verification point Bridge1Jpg49392Bytes_standard object in the SUT.
	 */
	protected IFtVerificationPoint Bridge1Jpg49392Bytes_standardVP() 
	{
		return vp("Bridge1Jpg49392Bytes_standard");
	}
	protected IFtVerificationPoint Bridge1Jpg49392Bytes_standardVP(TestObject anchor)
	{
		return vp("Bridge1Jpg49392Bytes_standard", anchor);
	}
	
	/**
	 * Locate and return the verification point Bridge1Jpg49392Bytes_text object in the SUT.
	 */
	protected IFtVerificationPoint Bridge1Jpg49392Bytes_textVP() 
	{
		return vp("Bridge1Jpg49392Bytes_text");
	}
	protected IFtVerificationPoint Bridge1Jpg49392Bytes_textVP(TestObject anchor)
	{
		return vp("Bridge1Jpg49392Bytes_text", anchor);
	}
	
	/**
	 * Locate and return the verification point Button_text object in the SUT.
	 */
	protected IFtVerificationPoint Button_textVP() 
	{
		return vp("Button_text");
	}
	protected IFtVerificationPoint Button_textVP(TestObject anchor)
	{
		return vp("Button_text", anchor);
	}
	
	/**
	 * Locate and return the verification point CheckboxON_standard object in the SUT.
	 */
	protected IFtVerificationPoint CheckboxON_standardVP() 
	{
		return vp("CheckboxON_standard");
	}
	protected IFtVerificationPoint CheckboxON_standardVP(TestObject anchor)
	{
		return vp("CheckboxON_standard", anchor);
	}
	
	/**
	 * Locate and return the verification point CheckboxON_state object in the SUT.
	 */
	protected IFtVerificationPoint CheckboxON_stateVP() 
	{
		return vp("CheckboxON_state");
	}
	protected IFtVerificationPoint CheckboxON_stateVP(TestObject anchor)
	{
		return vp("CheckboxON_state", anchor);
	}
	
	/**
	 * Locate and return the verification point CheckboxON_state_2 object in the SUT.
	 */
	protected IFtVerificationPoint CheckboxON_state_2VP() 
	{
		return vp("CheckboxON_state_2");
	}
	protected IFtVerificationPoint CheckboxON_state_2VP(TestObject anchor)
	{
		return vp("CheckboxON_state_2", anchor);
	}
	
	/**
	 * Locate and return the verification point CheckboxON_state_3 object in the SUT.
	 */
	protected IFtVerificationPoint CheckboxON_state_3VP() 
	{
		return vp("CheckboxON_state_3");
	}
	protected IFtVerificationPoint CheckboxON_state_3VP(TestObject anchor)
	{
		return vp("CheckboxON_state_3", anchor);
	}
	
	/**
	 * Locate and return the verification point fav_file_text object in the SUT.
	 */
	protected IFtVerificationPoint fav_file_textVP() 
	{
		return vp("fav_file_text");
	}
	protected IFtVerificationPoint fav_file_textVP(TestObject anchor)
	{
		return vp("fav_file_text", anchor);
	}
	
	/**
	 * Locate and return the verification point fav_file_text_2 object in the SUT.
	 */
	protected IFtVerificationPoint fav_file_text_2VP() 
	{
		return vp("fav_file_text_2");
	}
	protected IFtVerificationPoint fav_file_text_2VP(TestObject anchor)
	{
		return vp("fav_file_text_2", anchor);
	}
	
	/**
	 * Locate and return the verification point HTMLFormSampler_standard object in the SUT.
	 */
	protected IFtVerificationPoint HTMLFormSampler_standardVP() 
	{
		return vp("HTMLFormSampler_standard");
	}
	protected IFtVerificationPoint HTMLFormSampler_standardVP(TestObject anchor)
	{
		return vp("HTMLFormSampler_standard", anchor);
	}
	
	/**
	 * Locate and return the verification point HTMLFormSampler_text object in the SUT.
	 */
	protected IFtVerificationPoint HTMLFormSampler_textVP() 
	{
		return vp("HTMLFormSampler_text");
	}
	protected IFtVerificationPoint HTMLFormSampler_textVP(TestObject anchor)
	{
		return vp("HTMLFormSampler_text", anchor);
	}
	
	/**
	 * Locate and return the verification point HTMLFormTagFile_standard object in the SUT.
	 */
	protected IFtVerificationPoint HTMLFormTagFile_standardVP() 
	{
		return vp("HTMLFormTagFile_standard");
	}
	protected IFtVerificationPoint HTMLFormTagFile_standardVP(TestObject anchor)
	{
		return vp("HTMLFormTagFile_standard", anchor);
	}
	
	/**
	 * Locate and return the verification point HTMLFormTagFile_text object in the SUT.
	 */
	protected IFtVerificationPoint HTMLFormTagFile_textVP() 
	{
		return vp("HTMLFormTagFile_text");
	}
	protected IFtVerificationPoint HTMLFormTagFile_textVP(TestObject anchor)
	{
		return vp("HTMLFormTagFile_text", anchor);
	}
	
	/**
	 * Locate and return the verification point httpCivcez229NonprodHclpnpComA_httpCivcez229NonprodHclpnpComA object in the SUT.
	 */
	protected IFtVerificationPoint httpCivcez229NonprodHclpnpComA_httpCivcez229NonprodHclpnpComAVP() 
	{
		return vp("httpCivcez229NonprodHclpnpComA_httpCivcez229NonprodHclpnpComA");
	}
	protected IFtVerificationPoint httpCivcez229NonprodHclpnpComA_httpCivcez229NonprodHclpnpComAVP(TestObject anchor)
	{
		return vp("httpCivcez229NonprodHclpnpComA_httpCivcez229NonprodHclpnpComA", anchor);
	}
	
	/**
	 * Locate and return the verification point Investment2_list object in the SUT.
	 */
	protected IFtVerificationPoint Investment2_listVP() 
	{
		return vp("Investment2_list");
	}
	protected IFtVerificationPoint Investment2_listVP(TestObject anchor)
	{
		return vp("Investment2_list", anchor);
	}
	
	/**
	 * Locate and return the verification point Investment2_list_2 object in the SUT.
	 */
	protected IFtVerificationPoint Investment2_list_2VP() 
	{
		return vp("Investment2_list_2");
	}
	protected IFtVerificationPoint Investment2_list_2VP(TestObject anchor)
	{
		return vp("Investment2_list_2", anchor);
	}
	
	/**
	 * Locate and return the verification point Investment2_selected object in the SUT.
	 */
	protected IFtVerificationPoint Investment2_selectedVP() 
	{
		return vp("Investment2_selected");
	}
	protected IFtVerificationPoint Investment2_selectedVP(TestObject anchor)
	{
		return vp("Investment2_selected", anchor);
	}
	
	/**
	 * Locate and return the verification point Investment2_selected_2 object in the SUT.
	 */
	protected IFtVerificationPoint Investment2_selected_2VP() 
	{
		return vp("Investment2_selected_2");
	}
	protected IFtVerificationPoint Investment2_selected_2VP(TestObject anchor)
	{
		return vp("Investment2_selected_2", anchor);
	}
	
	/**
	 * Locate and return the verification point Investment3_list object in the SUT.
	 */
	protected IFtVerificationPoint Investment3_listVP() 
	{
		return vp("Investment3_list");
	}
	protected IFtVerificationPoint Investment3_listVP(TestObject anchor)
	{
		return vp("Investment3_list", anchor);
	}
	
	/**
	 * Locate and return the verification point Investment3_selected object in the SUT.
	 */
	protected IFtVerificationPoint Investment3_selectedVP() 
	{
		return vp("Investment3_selected");
	}
	protected IFtVerificationPoint Investment3_selectedVP(TestObject anchor)
	{
		return vp("Investment3_selected", anchor);
	}
	
	/**
	 * Locate and return the verification point Investment3_selected_2 object in the SUT.
	 */
	protected IFtVerificationPoint Investment3_selected_2VP() 
	{
		return vp("Investment3_selected_2");
	}
	protected IFtVerificationPoint Investment3_selected_2VP(TestObject anchor)
	{
		return vp("Investment3_selected_2", anchor);
	}
	
	/**
	 * Locate and return the verification point Investment_list object in the SUT.
	 */
	protected IFtVerificationPoint Investment_listVP() 
	{
		return vp("Investment_list");
	}
	protected IFtVerificationPoint Investment_listVP(TestObject anchor)
	{
		return vp("Investment_list", anchor);
	}
	
	/**
	 * Locate and return the verification point Investment_selected object in the SUT.
	 */
	protected IFtVerificationPoint Investment_selectedVP() 
	{
		return vp("Investment_selected");
	}
	protected IFtVerificationPoint Investment_selectedVP(TestObject anchor)
	{
		return vp("Investment_selected", anchor);
	}
	
	/**
	 * Locate and return the verification point Reset_text object in the SUT.
	 */
	protected IFtVerificationPoint Reset_textVP() 
	{
		return vp("Reset_text");
	}
	protected IFtVerificationPoint Reset_textVP(TestObject anchor)
	{
		return vp("Reset_text", anchor);
	}
	
	/**
	 * Locate and return the verification point Scrollbox_text object in the SUT.
	 */
	protected IFtVerificationPoint Scrollbox_textVP() 
	{
		return vp("Scrollbox_text");
	}
	protected IFtVerificationPoint Scrollbox_textVP(TestObject anchor)
	{
		return vp("Scrollbox_text", anchor);
	}
	
	/**
	 * Locate and return the verification point Scrollbox_text_2 object in the SUT.
	 */
	protected IFtVerificationPoint Scrollbox_text_2VP() 
	{
		return vp("Scrollbox_text_2");
	}
	protected IFtVerificationPoint Scrollbox_text_2VP(TestObject anchor)
	{
		return vp("Scrollbox_text_2", anchor);
	}
	
	/**
	 * Locate and return the verification point Scrollbox_text_3 object in the SUT.
	 */
	protected IFtVerificationPoint Scrollbox_text_3VP() 
	{
		return vp("Scrollbox_text_3");
	}
	protected IFtVerificationPoint Scrollbox_text_3VP(TestObject anchor)
	{
		return vp("Scrollbox_text_3", anchor);
	}
	
	/**
	 * Locate and return the verification point SexF_state object in the SUT.
	 */
	protected IFtVerificationPoint SexF_stateVP() 
	{
		return vp("SexF_state");
	}
	protected IFtVerificationPoint SexF_stateVP(TestObject anchor)
	{
		return vp("SexF_state", anchor);
	}
	
	/**
	 * Locate and return the verification point SexM_state object in the SUT.
	 */
	protected IFtVerificationPoint SexM_stateVP() 
	{
		return vp("SexM_state");
	}
	protected IFtVerificationPoint SexM_stateVP(TestObject anchor)
	{
		return vp("SexM_state", anchor);
	}
	
	/**
	 * Locate and return the verification point Submit_text object in the SUT.
	 */
	protected IFtVerificationPoint Submit_textVP() 
	{
		return vp("Submit_text");
	}
	protected IFtVerificationPoint Submit_textVP(TestObject anchor)
	{
		return vp("Submit_text", anchor);
	}
	
	/**
	 * Locate and return the verification point Submit_text_2 object in the SUT.
	 */
	protected IFtVerificationPoint Submit_text_2VP() 
	{
		return vp("Submit_text_2");
	}
	protected IFtVerificationPoint Submit_text_2VP(TestObject anchor)
	{
		return vp("Submit_text_2", anchor);
	}
	
	/**
	 * Locate and return the verification point the_name_text object in the SUT.
	 */
	protected IFtVerificationPoint the_name_textVP() 
	{
		return vp("the_name_text");
	}
	protected IFtVerificationPoint the_name_textVP(TestObject anchor)
	{
		return vp("the_name_text", anchor);
	}
	
	/**
	 * Locate and return the verification point the_name_text_2 object in the SUT.
	 */
	protected IFtVerificationPoint the_name_text_2VP() 
	{
		return vp("the_name_text_2");
	}
	protected IFtVerificationPoint the_name_text_2VP(TestObject anchor)
	{
		return vp("the_name_text_2", anchor);
	}
	
	/**
	 * Locate and return the verification point _1linebox_text object in the SUT.
	 */
	protected IFtVerificationPoint _1linebox_textVP() 
	{
		return vp("_1linebox_text");
	}
	protected IFtVerificationPoint _1linebox_textVP(TestObject anchor)
	{
		return vp("_1linebox_text", anchor);
	}
	
	/**
	 * Locate and return the verification point _1linebox_text_2 object in the SUT.
	 */
	protected IFtVerificationPoint _1linebox_text_2VP() 
	{
		return vp("_1linebox_text_2");
	}
	protected IFtVerificationPoint _1linebox_text_2VP(TestObject anchor)
	{
		return vp("_1linebox_text_2", anchor);
	}
	
	/**
	 * Locate and return the verification point _1linebox_text_3 object in the SUT.
	 */
	protected IFtVerificationPoint _1linebox_text_3VP() 
	{
		return vp("_1linebox_text_3");
	}
	protected IFtVerificationPoint _1linebox_text_3VP(TestObject anchor)
	{
		return vp("_1linebox_text_3", anchor);
	}
	
	/**
	 * Locate and return the verification point _standard object in the SUT.
	 */
	protected IFtVerificationPoint _standardVP() 
	{
		return vp("_standard");
	}
	protected IFtVerificationPoint _standardVP(TestObject anchor)
	{
		return vp("_standard", anchor);
	}
	
	

	protected html_8604_Frames2Helper()
	{
		setScriptName("html_8604_Frames2");
	}
	
}

