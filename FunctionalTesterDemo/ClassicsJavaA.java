/*******************************************************************************
* Licensed Materials - Property of IBM and/or HCL
* (c) Copyright HCL Technologies Ltd. 2017. All Rights Reserved.
* 
* Note to U.S. Government Users Restricted Rights:
* Use, duplication or disclosure restricted by GSA ADP Schedule
* Contract with IBM Corp.
********************************************************************************/
import resources.ClassicsJavaAHelper;
import com.rational.test.ft.*;
import com.rational.test.ft.application.StartIde;
import com.rational.test.ft.object.interfaces.*;
import com.rational.test.ft.object.interfaces.SAP.*;
import com.rational.test.ft.object.interfaces.WPF.*;
import com.rational.test.ft.object.interfaces.dojo.*;
import com.rational.test.ft.object.interfaces.siebel.*;
import com.rational.test.ft.object.interfaces.flex.*;
import com.rational.test.ft.object.interfaces.generichtmlsubdomain.*;
import com.rational.test.ft.script.*;
import com.rational.test.ft.value.*;
import com.rational.test.ft.vp.*;
import com.ibm.rational.test.ft.object.interfaces.sapwebportal.*;
/**
 * Description   : Functional Test Script
 * This script is created using the Record functionality provided by Tool.
 * Once the script is created using the recorder it can further be modified as required. For example The comments were added after the script creation.
 * timerStart/timerStop/Sleep APIs have been added post recording. They however can also be added during recording using the 'Insert Script Support Commands' tool button 
 * in the Recorder window.
 * The Project also has a TestFolder CommonUtilities which has a HelperSuper class called HelperSuper_GenericFunctions. This HelperSuper_GenericFunctions  was specified as
 * the Helper super class while creating the script.
 * Existing Scripts can be made to use the Helper Superclass by opening the properties window of the script(right click on * script name and select Properties...).
 */

/** 
 * Note - Each Script extends from a Helper class which is auto-generated by the tool, and this Helper extends from the RationalTestScript class.
 * A Script Helper class in turn may  extend (optional) from another class which is called  the Helper Super Class which in turn extends from RationalTestScript class
 * This script 's  Helper class extends from a class  HelperSuper_GenericFunctions  which is inside a TestFolder  named CommonUtilities.
 * The Helper SuperClass(s)  are required to be present in a TestFolder.
 **/
public class ClassicsJavaA extends ClassicsJavaAHelper
{
	/**
	 * Script Name   : <b>ClassicsJavaA</b>
	 * Generated     : <b>27-Jan-2017 10:46:14 PM</b>
	 * Description   : Functional Test Script
	 * Original Host : WinNT Version 6.1  Build 7601 (S)
	 * 
	 * @since  2017/01/27
	 * @author Tester
	 */
	public void testMain(Object[] args) 
	{
		/**
		 * The APIs like  logInfo(), logError(), logWarning() etc can be used to print a message to the play-back log which is generated after the
		 * script execution.
		 */
		logInfo("Starting execution of Script " + getScriptName());
		
		/**
		 *  Use startApp("<<application-name>>"), to launch an application that is configured through Configure-> Configure Applications for Testing.
		 *  ClassicsJavaA is a sample Java Application that is shipped with the tool. It is pre-configured in Applications configured for testing.
		 *  By default it uses Java that is bundled with the product.
		 */
		startApp("ClassicsJavaA");
		
		/**
		 *  sleep(timeInSeconds) API, allows the execution to pause for the time specified.
		 **/
		sleep(4); 
		
		/**
		 *  timerStart/timerStop  APIs  allow to capture the overall time spent between the calls.
		 *  timerStart("<timer-name>") & timerStop("<timer-name>")
		 */
		timerStart("timerOne");
		
		/**
		 *  The following Comment and the next two lines show recording that was performed on a Frame with title ClassicsCD  
		 **/
		// Frame: ClassicsCD
		tree2().click(atPath("Composers->Schubert->Location(PLUS_MINUS)"));
		tree2().drag(atPath("Composers->Schubert->Symphonies Nos. 5 & 9"));
		
		/**
		 *  Highlight the control using a common method implemented in the Helper Superclass  'HelperSuper_GenericFunctions'
		 **/
		hilightControl(placeOrder());
		placeOrder().click();
		
				
		/**
		 *  The following Comment and the next two lines were generated by recorder while the nameCombo ad  password fields was Data Driven using a private Datapool 
		 *  Private Datapool means a Datapool that is associated with this script. Other type could be Shared Datapool that is shared among scripts in a Project.
		 **/
		// Data Driven Code inserted on 27-Jan-2017
		nameCombo().select(dpString("nameCombo"));
		password().setText(dpString("Password"));
	
		
		// Frame: Member Logon
		password().click(atPoint(59,8));
		rememberPassword().clickToState(SELECTED);
		ok().click();
		
		// Frame: Place an Order
		cardNumberIncludeTheSpaces().click(atPoint(41,5));
		placeAnOrder().inputChars("1234567891");
		expirationDate().click(atPoint(21,9));
		placeAnOrder().inputChars("02/2050");
		placeOrder2().click();
		
		/**
		 * Data Verification point is recorded  using the 'Insert Verification Point' command in the Recorder monitor.
		 * Verification Points are listed and can be viewed in the 'Script Explorer' view.
		 * Verification Points can also be inserted using  'Insert Verification Point into Active Functional Test Script' command in the IDE's toolbar.
		 **/
		yourOrderHasBeenReceivedYourOr().performTest(YourOrderHasBeenReceivedYourOr_textVP());
		ok2().click();
		
		// Frame: ClassicsCD
		classicsCD(ANY,MAY_EXIT).close();
		
		
		/**
		 * Stop the timer using the timerStop("<timer-name>").
		 * Same name must be given that was given to timerStart("<timer-name>").
		 * 
		 **/
		timerStop("timerOne");
		
	}
}

